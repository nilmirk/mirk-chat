const fs = require('fs');
const path = require('path');
const express = require('express');
const bodyParser = require('body-parser');
const { exec } = require('child_process');

const CONFIG_PATH = path.join(__dirname, 'config.json');
const app = express();
const PORT = 3001;

app.use(bodyParser.json());

// –û—Ç–¥–∞—á–∞ config.html
app.get('/', (req, res) => {
  fs.readFile(path.join(__dirname, 'config.html'), 'utf-8', (err, data) => {
    if (err) {
      res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.html');
    } else {
      res.setHeader('Content-Type', 'text/html');
      res.send(data);
    }
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
app.get('/config', (req, res) => {
  try {
    const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf-8'));
    res.json(config);
  } catch (e) {
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å config.json' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
app.post('/config', (req, res) => {
  try {
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(req.body, null, 2), 'utf-8');
    res.json({ success: true });
  } catch (e) {
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config.json' });
  }
});

app.listen(PORT, () => {
  const url = `http://localhost:${PORT}`;
  console.log(`üõ† –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${url}`);

  // üëâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
  const platform = process.platform;
  if (platform === 'win32') {
    exec(`start ${url}`);
  } else if (platform === 'darwin') {
    exec(`open ${url}`);
  } else {
    exec(`xdg-open ${url}`);
  }
});
